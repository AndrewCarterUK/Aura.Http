<?php
/**
 * 
 * This file is part of the Aura project for PHP.
 * 
 * @license http://opensource.org/licenses/bsd-license.php BSD
 * 
 */
namespace Aura\Http\Request;

use Aura\Http\Cookie as Cookie;
use Aura\Http\Factory\Cookie as CookieFactory;

/**
 * 
 * 
 * 
 * @package Aura.Http
 * 
 */
class CookieJar
{
    protected $list = [];

    protected $factory;
    
    protected $opened = false;

    protected $expire_session_cookies = false;

    /**
     *
     *
     * @param 
     *
     * @return 
     *
     */
    public function __construct(CookieFactory $factory)
    {
        $this->factory = $factory;
    }
    
    /**
     *
     *
     * @param 
     *
     * @return 
     *
     */
    public function expireSessionCookies($expire = true)
    {
        $this->expire_session_cookies = $expire;
    }

    /**
     *
     *
     * @param 
     *
     * @return 
     *
     */
    public function add(Cookie $cookie)
    {
        $key = $cookie->getName() . $cookie->getDomain() . $cookie->getPath();
        $this->list[$key] = $cookie;
    }

    /**
     *
     *
     * @param 
     *
     * @return 
     *
     */
    public function open($file)
    {
        if ($this->opened) {
            return;
        }

        $cookies = file_get_contents($file);
        $cookies = explode("\n", $cookies);

        foreach($cookies as $line) {
            $this->parseLine($line);
        }

        $this->opened = true;
    }


    /**
     *
     *
     * @param 
     *
     * @return 
     *
     */
    public function save($file)
    {
        if (! $this->list) {
            return false;
        }

        $lines = [];

        foreach ($this->list as $cookie) {
            $lines[] = $this->buildLine($cookie);
        }

        $this->opened = false;
        $this->list   = [];
        
        $msg = "# Netscape HTTP Cookie File\n" .
               "# http://curl.haxx.se/rfc/cookie_spec.html\n" .
               "# This file was generated by Aura\Http\Request! " .
               "Edit at your own risk.\n\n";

        return false !== file_put_contents($file, $msg . implode("\n", $lines));
    }

    /**
     *
     *
     * @param 
     *
     * @return 
     *
     */
    public function listAll($matching_url = null)
    {
        if (! $matching_url) {
            return $this->list;
        }

        $url = parse_url($matching_url);

        if (! isset($url['scheme'], $url['host'])) {
            $msg = 'The `$matching_url` argument must contain a ' .
                   'scheme and a host name.';
            throw new Exception($msg);
        }

        $path = empty($url['path']) ? '/' : $url['path'];
        $return = [];

        foreach ($this->list as $cookie) {
            if ($cookie->isMatch($url['scheme'], $url['host'], $path)) {
                $return[] = $cookie;
            }
        }

        return $return;
    }

    /**
     *
     *
     * @param 
     *
     * @return 
     *
     */
    protected function parseLine($line)
    {
        $line = trim($line);

        // Empty / commented line
        if ('' == $line || 
            ('#' == $line[0] && '#HttpOnly_' != substr($line, 0, 10))) {
            return;
        }

        $parts    = explode("\t", $line);
        $httponly = false;
        $domain   = $parts[0];

        if (strlen($parts[0]) > 10) {
            $httponly = substr($parts[0], 0, 10);
            $httponly = (boolean) '#HttpOnly_' == $httponly;
            $domain   = substr($parts[0], 10);
        }

        $cookie = $this->factory->newInstance(
            $parts[5], // name
            [
            'value'    => $parts[6], 
            'expire'   => $parts[4], 
            'path'     => $parts[2], 
            'domain'   => $domain,   
            'secure'   => ('TRUE' == $parts[3]) ? true : false, 
            'httponly' => $httponly
            ]  
        );

        if (! $cookie->isExpired($this->expire_session_cookies)) {
            $key = $parts[5] . $domain . $parts[2];
            $this->list[$key] = $cookie;
        }
    }

    /**
     *
     *
     * @param 
     *
     * @return 
     *
     */
    protected function buildLine(Cookie $cookie)
    {
        $domain = $cookie->getDomain();
        $expire = $cookie->getExpire();
        $path   = $cookie->getPath();

        if ($cookie->getHttpOnly()) {
            $domain = '#HttpOnly_' . $domain;
        }

        return sprintf(
            "%s\t%s\t%s\t%s\t%s\t%s\t%s",
            $domain,
            ('.' == $cookie->getDomain()[0]) ? 'TRUE' : 'FALSE',
            $path ?: '/',
            $cookie->getSecure() ? 'TRUE' : 'FALSE',
            $expire ?: '0',
            $cookie->getName(),
            $cookie->getValue()
        );
    }
}